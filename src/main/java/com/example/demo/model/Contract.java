package com.example.demo.model;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.StaticArray12;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class Contract extends org.web3j.tx.Contract {
    public static final String BINARY = "608060405260016004556001600955348015610019575f80fd5b505f6040518060400160405280600581526020017f61646d696e00000000000000000000000000000000000000000000000000000081525090505f6040518060400160405280600f81526020017f61646d696e40676d61696c2e636f6d000000000000000000000000000000000081525090505f6040518060400160405280600c81526020017f303030303030303030303030000000000000000000000000000000000000000081525090505f6040518060400160405280600d81526020017f4e6f74205370656369666965640000000000000000000000000000000000000081525090505f6040518060400160405280600a81526020017f323030302d30312d30310000000000000000000000000000000000000000000081525090505f6040518060400160405280600181526020017f4f0000000000000000000000000000000000000000000000000000000000000081525090505f6040518060400160405280600d81526020017f41646d696e20416464726573730000000000000000000000000000000000000081525090505f604051806101000160405280600454815260200189815260200188815260200187815260200186815260200185815260200184815260200183815250908060018154018082558091505060019003905f5260205f2090600802015f909190919091505f820151815f0155602082015181600101908161022991906105ae565b50604082015181600201908161023f91906105ae565b50606082015181600301908161025591906105ae565b50608082015181600401908161026b91906105ae565b5060a082015181600501908161028191906105ae565b5060c082015181600601908161029791906105ae565b5060e08201518160070190816102ad91906105ae565b505050600180876040516102c191906106c5565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060016002886040516102f791906106c5565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550600160038660405161032d91906106c5565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060045f81548092919061036390610708565b91905055505050505050505061074f565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103ef57607f821691505b602082108103610402576104016103ab565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610429565b61046e8683610429565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104b26104ad6104a884610486565b61048f565b610486565b9050919050565b5f819050919050565b6104cb83610498565b6104df6104d7826104b9565b848454610435565b825550505050565b5f90565b6104f36104e7565b6104fe8184846104c2565b505050565b5b81811015610521576105165f826104eb565b600181019050610504565b5050565b601f8211156105665761053781610408565b6105408461041a565b8101602085101561054f578190505b61056361055b8561041a565b830182610503565b50505b505050565b5f82821c905092915050565b5f6105865f198460080261056b565b1980831691505092915050565b5f61059e8383610577565b9150826002028217905092915050565b6105b782610374565b67ffffffffffffffff8111156105d0576105cf61037e565b5b6105da82546103d8565b6105e5828285610525565b5f60209050601f831160018114610616575f8415610604578287015190505b61060e8582610593565b865550610675565b601f19841661062486610408565b5f5b8281101561064b57848901518255600182019150602085019450602081019050610626565b868310156106685784890151610664601f891682610577565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b8281835e5f83830152505050565b5f61069f82610374565b6106a9818561067d565b93506106b9818560208601610687565b80840191505092915050565b5f6106d08284610695565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61071282610486565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610744576107436106db565b5b600182019050919050565b6159018061075c5f395ff3fe608060405234801561000f575f80fd5b5060043610610135575f3560e01c80637360518f116100b65780638f27ba341161007a5780638f27ba34146103b7578063905d9641146103f2578063a918a01314610422578063d99285c114610440578063e2842d791461045e578063e4af9bc81461047c57610135565b80637360518f146102fa57806379716f2014610318578063834f6c731461033957806389459547146103575780638e000ca71461038757610135565b80633610d569116100fd5780633610d56914610229578063365b98b21461025957806338f14845146102905780633d4f6ac7146102ac5780636cfa6998146102dc57610135565b806306c4306f1461013957806313e356911461017457806318046ae1146101a457806320894977146101db5780632734a20e1461020b575b5f80fd5b610153600480360381019061014e9190613f89565b610498565b60405161016b9c9b9a9998979695949392919061404d565b60405180910390f35b61018e6004803603810190610189919061412f565b610944565b60405161019b919061416d565b60405180910390f35b6101be60048036038101906101b991906142b2565b61096f565b6040516101d29897969594939291906142f9565b60405180910390f35b6101f560048036038101906101f091906142b2565b610ebb565b60405161020291906145eb565b60405180910390f35b610213611458565b60405161022091906146a1565b60405180910390f35b610243600480360381019061023e91906146bb565b611565565b6040516102509190614715565b60405180910390f35b610273600480360381019061026e9190613f89565b611605565b6040516102879897969594939291906142f9565b60405180910390f35b6102aa60048036038101906102a59190613f89565b611a01565b005b6102c660048036038101906102c1919061472e565b611fb7565b6040516102d39190614715565b60405180910390f35b6102e46122ad565b6040516102f1919061489c565b60405180910390f35b61030261259d565b60405161030f919061416d565b60405180910390f35b61032061266b565b60405161033094939291906148bc565b60405180910390f35b61034161284a565b60405161034e919061416d565b60405180910390f35b610371600480360381019061036c91906148ff565b612853565b60405161037e919061416d565b60405180910390f35b6103a1600480360381019061039c9190613f89565b612b70565b6040516103ae9190614715565b60405180910390f35b6103d160048036038101906103cc9190613f89565b612ca4565b6040516103e99c9b9a9998979695949392919061404d565b60405180910390f35b61040c60048036038101906104079190614a60565b61303f565b604051610419919061416d565b60405180910390f35b61042a6132fd565b60405161043791906145eb565b60405180910390f35b610448613705565b604051610455919061416d565b60405180910390f35b6104666138b6565b6040516104739190614d42565b60405180910390f35b61049660048036038101906104919190613f89565b613d0b565b005b5f60605f60605f6060805f805f6060805f8d1180156104b857506009548d105b6104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90614dac565b60405180910390fd5b5f600560018f6105079190614df7565b8154811061051857610517614e2a565b5b905f5260205f2090600c0201604051806101800160405290815f820154815260200160018201805461054990614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461057590614e84565b80156105c05780601f10610597576101008083540402835291602001916105c0565b820191905f5260205f20905b8154815290600101906020018083116105a357829003601f168201915b50505050508152602001600282015481526020016003820180546105e390614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90614e84565b801561065a5780601f106106315761010080835404028352916020019161065a565b820191905f5260205f20905b81548152906001019060200180831161063d57829003601f168201915b505050505081526020016004820154815260200160058201805461067d90614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546106a990614e84565b80156106f45780601f106106cb576101008083540402835291602001916106f4565b820191905f5260205f20905b8154815290600101906020018083116106d757829003601f168201915b5050505050815260200160068201805461070d90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461073990614e84565b80156107845780601f1061075b57610100808354040283529160200191610784565b820191905f5260205f20905b81548152906001019060200180831161076757829003601f168201915b505050505081526020016007820154815260200160088201548152602001600982015f9054906101000a900460ff16151515158152602001600a820180546107cb90614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546107f790614e84565b80156108425780601f1061081957610100808354040283529160200191610842565b820191905f5260205f20905b81548152906001019060200180831161082557829003601f168201915b50505050508152602001600b8201805461085b90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461088790614e84565b80156108d25780601f106108a9576101008083540402835291602001916108d2565b820191905f5260205f20905b8154815290600101906020018083116108b557829003601f168201915b5050505050815250509050805f015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001518a61014001518b61016001519c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b6006602052815f5260405f20818154811061095d575f80fd5b905f5260205f20015f91509150505481565b5f60608060608060608060605f8960405160200161098d9190614eee565b6040516020818303038152906040528051906020012090505f5b5f80549050811015610e7457815f82815481106109c7576109c6614e2a565b5b905f5260205f2090600802016002016040516020016109e69190614f96565b6040516020818303038152906040528051906020012003610e67575f808281548110610a1557610a14614e2a565b5b905f5260205f209060080201604051806101000160405290815f8201548152602001600182018054610a4690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7290614e84565b8015610abd5780601f10610a9457610100808354040283529160200191610abd565b820191905f5260205f20905b815481529060010190602001808311610aa057829003601f168201915b50505050508152602001600282018054610ad690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0290614e84565b8015610b4d5780601f10610b2457610100808354040283529160200191610b4d565b820191905f5260205f20905b815481529060010190602001808311610b3057829003601f168201915b50505050508152602001600382018054610b6690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9290614e84565b8015610bdd5780601f10610bb457610100808354040283529160200191610bdd565b820191905f5260205f20905b815481529060010190602001808311610bc057829003601f168201915b50505050508152602001600482018054610bf690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2290614e84565b8015610c6d5780601f10610c4457610100808354040283529160200191610c6d565b820191905f5260205f20905b815481529060010190602001808311610c5057829003601f168201915b50505050508152602001600582018054610c8690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb290614e84565b8015610cfd5780601f10610cd457610100808354040283529160200191610cfd565b820191905f5260205f20905b815481529060010190602001808311610ce057829003601f168201915b50505050508152602001600682018054610d1690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4290614e84565b8015610d8d5780601f10610d6457610100808354040283529160200191610d8d565b820191905f5260205f20905b815481529060010190602001808311610d7057829003601f168201915b50505050508152602001600782018054610da690614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd290614e84565b8015610e1d5780601f10610df457610100808354040283529160200191610e1d565b820191905f5260205f20905b815481529060010190602001808311610e0057829003601f168201915b5050505050815250509050805f015181602001518260400151836060015184608001518560a001518660c001518760e001519a509a509a509a509a509a509a509a50505050610eb0565b80806001019150506109a7565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea790614ff6565b60405180910390fd5b919395975091939597565b60605f805b600580549050811015610f5e5783604051602001610ede9190614eee565b6040516020818303038152906040528051906020012060058281548110610f0857610f07614e2a565b5b905f5260205f2090600c0201600101604051602001610f279190614f96565b6040516020818303038152906040528051906020012003610f51578180610f4d90615014565b9250505b8080600101915050610ec0565b505f8167ffffffffffffffff811115610f7a57610f7961418e565b5b604051908082528060200260200182016040528015610fb357816020015b610fa0613e6d565b815260200190600190039081610f985790505b5090505f805b60058054905081101561144c5785604051602001610fd79190614eee565b604051602081830303815290604052805190602001206005828154811061100157611000614e2a565b5b905f5260205f2090600c02016001016040516020016110209190614f96565b604051602081830303815290604052805190602001200361143f576005818154811061104f5761104e614e2a565b5b905f5260205f2090600c0201604051806101800160405290815f820154815260200160018201805461108090614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546110ac90614e84565b80156110f75780601f106110ce576101008083540402835291602001916110f7565b820191905f5260205f20905b8154815290600101906020018083116110da57829003601f168201915b505050505081526020016002820154815260200160038201805461111a90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461114690614e84565b80156111915780601f1061116857610100808354040283529160200191611191565b820191905f5260205f20905b81548152906001019060200180831161117457829003601f168201915b50505050508152602001600482015481526020016005820180546111b490614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546111e090614e84565b801561122b5780601f106112025761010080835404028352916020019161122b565b820191905f5260205f20905b81548152906001019060200180831161120e57829003601f168201915b5050505050815260200160068201805461124490614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461127090614e84565b80156112bb5780601f10611292576101008083540402835291602001916112bb565b820191905f5260205f20905b81548152906001019060200180831161129e57829003601f168201915b505050505081526020016007820154815260200160088201548152602001600982015f9054906101000a900460ff16151515158152602001600a8201805461130290614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461132e90614e84565b80156113795780601f1061135057610100808354040283529160200191611379565b820191905f5260205f20905b81548152906001019060200180831161135c57829003601f168201915b50505050508152602001600b8201805461139290614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546113be90614e84565b80156114095780601f106113e057610100808354040283529160200191611409565b820191905f5260205f20905b8154815290600101906020018083116113ec57829003601f168201915b50505050508152505083838151811061142557611424614e2a565b5b6020026020010181905250818061143b90615014565b9250505b8080600101915050610fb9565b50819350505050919050565b611460613eca565b611468613eca565b5f5b60058054905081101561155d57604051602001611486906150a5565b60405160208183030381529060405280519060200120600582815481106114b0576114af614e2a565b5b905f5260205f2090600c02016006016040516020016114cf9190614f96565b6040516020818303038152906040528051906020012003611550575f6115176005838154811061150257611501614e2a565b5b905f5260205f2090600c020160020154613e1b565b9050826001826115279190614df7565b600c811061153857611537614e2a565b5b60200201805180919061154a90615014565b81525050505b808060010191505061146a565b508091505090565b5f808311801561157a57506005805490508311155b6115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090614dac565b60405180910390fd5b5f60056001856115c99190614df7565b815481106115da576115d9614e2a565b5b905f5260205f2090600c020190508281600b0190816115f99190615244565b50600191505092915050565b5f8181548110611613575f80fd5b905f5260205f2090600802015f91509050805f01549080600101805461163890614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461166490614e84565b80156116af5780601f10611686576101008083540402835291602001916116af565b820191905f5260205f20905b81548152906001019060200180831161169257829003601f168201915b5050505050908060020180546116c490614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546116f090614e84565b801561173b5780601f106117125761010080835404028352916020019161173b565b820191905f5260205f20905b81548152906001019060200180831161171e57829003601f168201915b50505050509080600301805461175090614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461177c90614e84565b80156117c75780601f1061179e576101008083540402835291602001916117c7565b820191905f5260205f20905b8154815290600101906020018083116117aa57829003601f168201915b5050505050908060040180546117dc90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461180890614e84565b80156118535780601f1061182a57610100808354040283529160200191611853565b820191905f5260205f20905b81548152906001019060200180831161183657829003601f168201915b50505050509080600501805461186890614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461189490614e84565b80156118df5780601f106118b6576101008083540402835291602001916118df565b820191905f5260205f20905b8154815290600101906020018083116118c257829003601f168201915b5050505050908060060180546118f490614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461192090614e84565b801561196b5780601f106119425761010080835404028352916020019161196b565b820191905f5260205f20905b81548152906001019060200180831161194e57829003601f168201915b50505050509080600701805461198090614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546119ac90614e84565b80156119f75780601f106119ce576101008083540402835291602001916119f7565b820191905f5260205f20905b8154815290600101906020018083116119da57829003601f168201915b5050505050905088565b5f81118015611a11575060045481105b611a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a479061535d565b60405180910390fd5b5f80600183611a5f9190614df7565b81548110611a7057611a6f614e2a565b5b905f5260205f209060080201604051806101000160405290815f8201548152602001600182018054611aa190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611acd90614e84565b8015611b185780601f10611aef57610100808354040283529160200191611b18565b820191905f5260205f20905b815481529060010190602001808311611afb57829003601f168201915b50505050508152602001600282018054611b3190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5d90614e84565b8015611ba85780601f10611b7f57610100808354040283529160200191611ba8565b820191905f5260205f20905b815481529060010190602001808311611b8b57829003601f168201915b50505050508152602001600382018054611bc190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611bed90614e84565b8015611c385780601f10611c0f57610100808354040283529160200191611c38565b820191905f5260205f20905b815481529060010190602001808311611c1b57829003601f168201915b50505050508152602001600482018054611c5190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7d90614e84565b8015611cc85780601f10611c9f57610100808354040283529160200191611cc8565b820191905f5260205f20905b815481529060010190602001808311611cab57829003601f168201915b50505050508152602001600582018054611ce190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0d90614e84565b8015611d585780601f10611d2f57610100808354040283529160200191611d58565b820191905f5260205f20905b815481529060010190602001808311611d3b57829003601f168201915b50505050508152602001600682018054611d7190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9d90614e84565b8015611de85780601f10611dbf57610100808354040283529160200191611de8565b820191905f5260205f20905b815481529060010190602001808311611dcb57829003601f168201915b50505050508152602001600782018054611e0190614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2d90614e84565b8015611e785780601f10611e4f57610100808354040283529160200191611e78565b820191905f5260205f20905b815481529060010190602001808311611e5b57829003601f168201915b50505050508152505090505f600183611e919190614df7565b81548110611ea257611ea1614e2a565b5b905f5260205f2090600802015f8082015f9055600182015f611ec49190613eed565b600282015f611ed39190613eed565b600382015f611ee29190613eed565b600482015f611ef19190613eed565b600582015f611f009190613eed565b600682015f611f0f9190613eed565b600782015f611f1e9190613eed565b505060018160400151604051611f349190614eee565b90815260200160405180910390205f6101000a81549060ff021916905560028160200151604051611f659190614eee565b90815260200160405180910390205f6101000a81549060ff021916905560038160600151604051611f969190614eee565b90815260200160405180910390205f6101000a81549060ff02191690555050565b5f8086118015611fcc57506005805490508611155b61200b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612002906153c5565b60405180910390fd5b5f600560018861201b9190614df7565b8154811061202c5761202b614e2a565b5b905f5260205f2090600c020190505f8060018a6120499190614df7565b8154811061205a57612059614e2a565b5b905f5260205f20906008020190507f998474758c0f70f185651ffc69b139036898106a3de291220847f99024d697138260060160405160200161209d9190614f96565b60405160208183030381529060405280519060200120036120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea9061542d565b60405180910390fd5b8585856040516020016121089392919061544b565b6040516020818303038152906040528051906020012081600601826003018360040160405160200161213c9392919061547b565b6040516020818303038152906040528051906020012014612192576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612189906154f5565b60405180910390fd5b5f846040516020016121a49190614eee565b6040516020818303038152906040528051906020012090505f7f4dfaf292412d13601e73526ca8124b4807dfd849266a924b97aab94fdf589d7382146121eb57602d6121ee565b602a5b60ff1690506009816122009190615513565b891115612242576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122399061559e565b60405180910390fd5b8884600401819055506040518060400160405280600a81526020017f7375636365737366756c000000000000000000000000000000000000000000008152508460060190816122919190615244565b5042846002018190555060019450505050509695505050505050565b60605f60058054905067ffffffffffffffff8111156122cf576122ce61418e565b5b6040519080825280602002602001820160405280156122fd5781602001602082028036833780820191505090505b5090505f60058054905067ffffffffffffffff8111156123205761231f61418e565b5b60405190808252806020026020018201604052801561234e5781602001602082028036833780820191505090505b5090505f805b6005805490508110156124f4577f998474758c0f70f185651ffc69b139036898106a3de291220847f99024d697136005828154811061239657612395614e2a565b5b905f5260205f2090600c02016006016040516020016123b59190614f96565b60405160208183030381529060405280519060200120036124e7575f600582815481106123e5576123e4614e2a565b5b905f5260205f2090600c02016001016040516020016124049190614f96565b6040516020818303038152906040528051906020012090505f600190505f5b8481101561248d578287828151811061243f5761243e614e2a565b5b6020026020010151036124805785818151811061245f5761245e614e2a565b5b60200260200101805180919061247490615014565b815250505f915061248d565b8080600101915050612423565b5080156124e457818685815181106124a8576124a7614e2a565b5b60200260200101818152505060018585815181106124c9576124c8614e2a565b5b60200260200101818152505083806124e090615014565b9450505b50505b8080600101915050612354565b505f8167ffffffffffffffff8111156125105761250f61418e565b5b60405190808252806020026020018201604052801561253e5781602001602082028036833780820191505090505b5090505f5b828110156125925783818151811061255e5761255d614e2a565b5b602002602001015182828151811061257957612578614e2a565b5b6020026020010181815250508080600101915050612543565b508094505050505090565b5f805f90505f5b600580549050811015612663576040516020016125c0906150a5565b60405160208183030381529060405280519060200120600582815481106125ea576125e9614e2a565b5b905f5260205f2090600c02016006016040516020016126099190614f96565b6040516020818303038152906040528051906020012003612656576005818154811061263857612637614e2a565b5b905f5260205f2090600c0201600401548261265391906155bc565b91505b80806001019150506125a4565b508091505090565b5f805f805f805f805f5b600580549050811015612833577f998474758c0f70f185651ffc69b139036898106a3de291220847f99024d69713600582815481106126b7576126b6614e2a565b5b905f5260205f2090600c02016006016040516020016126d69190614f96565b6040516020818303038152906040528051906020012003612826575f6005828154811061270657612705614e2a565b5b905f5260205f2090600c02016005016040516020016127259190614f96565b6040516020818303038152906040528051906020012090507f03783fac2efed8fbc9ad443e592ee30e61d65f471140c10ca155e937b435b760810361277757858061276f90615014565b965050612824565b7f1f675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a6911181036127b15784806127a990615014565b955050612823565b7f21faab852d29e39c56dc14d20d71ba15c1ea83a26f45b658b5e8d0f8d61f3bbd81036127eb5783806127e390615014565b945050612822565b7fc669aa98d5975cc43653c879a18d9bc4aa8bf51e69f61aeb1d7769216f98009a810361282157828061281d90615014565b9350505b5b5b5b505b8080600101915050612675565b508383838397509750975097505050505090919293565b5f600454905090565b5f6001876040516128649190614eee565b90815260200160405180910390205f9054906101000a900460ff16156128bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b690615639565b60405180910390fd5b6002886040516128cf9190614eee565b90815260200160405180910390205f9054906101000a900460ff161561292a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612921906156a1565b60405180910390fd5b60038660405161293a9190614eee565b90815260200160405180910390205f9054906101000a900460ff1615612995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298c90615709565b60405180910390fd5b5f60405180610100016040528060045481526020018a815260200189815260200188815260200187815260200186815260200185815260200184815250908060018154018082558091505060019003905f5260205f2090600802015f909190919091505f820151815f01556020820151816001019081612a159190615244565b506040820151816002019081612a2b9190615244565b506060820151816003019081612a419190615244565b506080820151816004019081612a579190615244565b5060a0820151816005019081612a6d9190615244565b5060c0820151816006019081612a839190615244565b5060e0820151816007019081612a999190615244565b50505060018088604051612aad9190614eee565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055506001600289604051612ae39190614eee565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055506001600387604051612b199190614eee565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060045f815480929190612b4f90615014565b91905055506001600454612b639190614df7565b9050979650505050505050565b5f8082118015612b8557506005805490508211155b612bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bbb90614dac565b60405180910390fd5b5f6005600184612bd49190614df7565b81548110612be557612be4614e2a565b5b905f5260205f2090600c020190507f998474758c0f70f185651ffc69b139036898106a3de291220847f99024d6971381600601604051602001612c289190614f96565b6040516020818303038152906040528051906020012014612c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7590615771565b60405180910390fd5b6001816009015f6101000a81548160ff0219169083151502179055506001915050919050565b60058181548110612cb3575f80fd5b905f5260205f2090600c02015f91509050805f015490806001018054612cd890614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0490614e84565b8015612d4f5780601f10612d2657610100808354040283529160200191612d4f565b820191905f5260205f20905b815481529060010190602001808311612d3257829003601f168201915b505050505090806002015490806003018054612d6a90614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612d9690614e84565b8015612de15780601f10612db857610100808354040283529160200191612de1565b820191905f5260205f20905b815481529060010190602001808311612dc457829003601f168201915b505050505090806004015490806005018054612dfc90614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612e2890614e84565b8015612e735780601f10612e4a57610100808354040283529160200191612e73565b820191905f5260205f20905b815481529060010190602001808311612e5657829003601f168201915b505050505090806006018054612e8890614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612eb490614e84565b8015612eff5780601f10612ed657610100808354040283529160200191612eff565b820191905f5260205f20905b815481529060010190602001808311612ee257829003601f168201915b505050505090806007015490806008015490806009015f9054906101000a900460ff169080600a018054612f3290614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612f5e90614e84565b8015612fa95780601f10612f8057610100808354040283529160200191612fa9565b820191905f5260205f20905b815481529060010190602001808311612f8c57829003601f168201915b50505050509080600b018054612fbe90614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054612fea90614e84565b80156130355780601f1061300c57610100808354040283529160200191613035565b820191905f5260205f20905b81548152906001019060200180831161301857829003601f168201915b505050505090508c565b5f808a846040516020016130549291906157af565b60405160208183030381529060405280519060200120905060085f8281526020019081526020015f205f9054906101000a900460ff16156130ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c190615820565b60405180910390fd5b5f808b036130d8575f6130da565b8a5b9050600560405180610180016040528060095481526020018e81526020018381526020018c81526020018b81526020018a81526020018981526020018781526020018881526020015f1515815260200186815260200160405180602001604052805f815250815250908060018154018082558091505060019003905f5260205f2090600c02015f909190919091505f820151815f015560208201518160010190816131859190615244565b506040820151816002015560608201518160030190816131a59190615244565b506080820151816004015560a08201518160050190816131c59190615244565b5060c08201518160060190816131db9190615244565b5060e082015181600701556101008201518160080155610120820151816009015f6101000a81548160ff02191690831515021790555061014082015181600a0190816132279190615244565b5061016082015181600b01908161323e9190615244565b505050600160085f8481526020019081526020015f205f6101000a81548160ff02191690831515021790555060065f8781526020019081526020015f20600954908060018154018082558091505060019003905f5260205f20015f909190919091505560095460078d6040516132b49190614eee565b90815260200160405180910390208190555060095f8154809291906132d890615014565b919050555060016009546132ec9190614df7565b925050509998505050505050505050565b60606005805480602002602001604051908101604052809291908181526020015f905b828210156136fc578382905f5260205f2090600c0201604051806101800160405290815f820154815260200160018201805461335b90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461338790614e84565b80156133d25780601f106133a9576101008083540402835291602001916133d2565b820191905f5260205f20905b8154815290600101906020018083116133b557829003601f168201915b50505050508152602001600282015481526020016003820180546133f590614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461342190614e84565b801561346c5780601f106134435761010080835404028352916020019161346c565b820191905f5260205f20905b81548152906001019060200180831161344f57829003601f168201915b505050505081526020016004820154815260200160058201805461348f90614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546134bb90614e84565b80156135065780601f106134dd57610100808354040283529160200191613506565b820191905f5260205f20905b8154815290600101906020018083116134e957829003601f168201915b5050505050815260200160068201805461351f90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461354b90614e84565b80156135965780601f1061356d57610100808354040283529160200191613596565b820191905f5260205f20905b81548152906001019060200180831161357957829003601f168201915b505050505081526020016007820154815260200160088201548152602001600982015f9054906101000a900460ff16151515158152602001600a820180546135dd90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461360990614e84565b80156136545780601f1061362b57610100808354040283529160200191613654565b820191905f5260205f20905b81548152906001019060200180831161363757829003601f168201915b50505050508152602001600b8201805461366d90614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461369990614e84565b80156136e45780601f106136bb576101008083540402835291602001916136e4565b820191905f5260205f20905b8154815290600101906020018083116136c757829003601f168201915b50505050508152505081526020019060010190613320565b50505050905090565b5f8060058054905067ffffffffffffffff8111156137265761372561418e565b5b6040519080825280602002602001820160405280156137545781602001602082028036833780820191505090505b5090505f805b6005805490508110156138ad577f998474758c0f70f185651ffc69b139036898106a3de291220847f99024d697136005828154811061379c5761379b614e2a565b5b905f5260205f2090600c02016006016040516020016137bb9190614f96565b60405160208183030381529060405280519060200120036138a0575f600582815481106137eb576137ea614e2a565b5b905f5260205f2090600c020160010160405160200161380a9190614f96565b6040516020818303038152906040528051906020012090505f600190505f5b84811015613867578286828151811061384557613844614e2a565b5b60200260200101510361385a575f9150613867565b8080600101915050613829565b50801561389d578185858151811061388257613881614e2a565b5b602002602001018181525050838061389990615014565b9450505b50505b808060010191505061375a565b50809250505090565b60605f805480602002602001604051908101604052809291908181526020015f905b82821015613d02578382905f5260205f209060080201604051806101000160405290815f820154815260200160018201805461391390614e84565b80601f016020809104026020016040519081016040528092919081815260200182805461393f90614e84565b801561398a5780601f106139615761010080835404028352916020019161398a565b820191905f5260205f20905b81548152906001019060200180831161396d57829003601f168201915b505050505081526020016002820180546139a390614e84565b80601f01602080910402602001604051908101604052809291908181526020018280546139cf90614e84565b8015613a1a5780601f106139f157610100808354040283529160200191613a1a565b820191905f5260205f20905b8154815290600101906020018083116139fd57829003601f168201915b50505050508152602001600382018054613a3390614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054613a5f90614e84565b8015613aaa5780601f10613a8157610100808354040283529160200191613aaa565b820191905f5260205f20905b815481529060010190602001808311613a8d57829003601f168201915b50505050508152602001600482018054613ac390614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054613aef90614e84565b8015613b3a5780601f10613b1157610100808354040283529160200191613b3a565b820191905f5260205f20905b815481529060010190602001808311613b1d57829003601f168201915b50505050508152602001600582018054613b5390614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054613b7f90614e84565b8015613bca5780601f10613ba157610100808354040283529160200191613bca565b820191905f5260205f20905b815481529060010190602001808311613bad57829003601f168201915b50505050508152602001600682018054613be390614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054613c0f90614e84565b8015613c5a5780601f10613c3157610100808354040283529160200191613c5a565b820191905f5260205f20905b815481529060010190602001808311613c3d57829003601f168201915b50505050508152602001600782018054613c7390614e84565b80601f0160208091040260200160405190810160405280929190818152602001828054613c9f90614e84565b8015613cea5780601f10613cc157610100808354040283529160200191613cea565b820191905f5260205f20905b815481529060010190602001808311613ccd57829003601f168201915b505050505081525050815260200190600101906138d8565b50505050905090565b5f81118015613d1b575060095481105b613d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d5190614dac565b60405180910390fd5b6005600182613d699190614df7565b81548110613d7a57613d79614e2a565b5b905f5260205f2090600c02015f8082015f9055600182015f613d9c9190613eed565b600282015f9055600382015f613db29190613eed565b600482015f9055600582015f613dc89190613eed565b600682015f613dd79190613eed565b600782015f9055600882015f9055600982015f6101000a81549060ff0219169055600a82015f613e079190613eed565b600b82015f613e169190613eed565b505050565b5f806001601e61016d6201518086613e33919061586b565b613e3d919061589b565b613e47919061586b565b613e5191906155bc565b9050600c811115613e6357600c613e65565b805b915050919050565b6040518061018001604052805f8152602001606081526020015f8152602001606081526020015f815260200160608152602001606081526020015f81526020015f81526020015f1515815260200160608152602001606081525090565b604051806101800160405280600c90602082028036833780820191505090505090565b508054613ef990614e84565b5f825580601f10613f0a5750613f27565b601f0160209004905f5260205f2090810190613f269190613f2a565b5b50565b5b80821115613f41575f815f905550600101613f2b565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b613f6881613f56565b8114613f72575f80fd5b50565b5f81359050613f8381613f5f565b92915050565b5f60208284031215613f9e57613f9d613f4e565b5b5f613fab84828501613f75565b91505092915050565b613fbd81613f56565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61400582613fc3565b61400f8185613fcd565b935061401f818560208601613fdd565b61402881613feb565b840191505092915050565b5f8115159050919050565b61404781614033565b82525050565b5f610180820190506140615f83018f613fb4565b8181036020830152614073818e613ffb565b9050614082604083018d613fb4565b8181036060830152614094818c613ffb565b90506140a3608083018b613fb4565b81810360a08301526140b5818a613ffb565b905081810360c08301526140c98189613ffb565b90506140d860e0830188613fb4565b6140e6610100830187613fb4565b6140f461012083018661403e565b8181036101408301526141078185613ffb565b905081810361016083015261411c8184613ffb565b90509d9c50505050505050505050505050565b5f806040838503121561414557614144613f4e565b5b5f61415285828601613f75565b925050602061416385828601613f75565b9150509250929050565b5f6020820190506141805f830184613fb4565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6141c482613feb565b810181811067ffffffffffffffff821117156141e3576141e261418e565b5b80604052505050565b5f6141f5613f45565b905061420182826141bb565b919050565b5f67ffffffffffffffff8211156142205761421f61418e565b5b61422982613feb565b9050602081019050919050565b828183375f83830152505050565b5f61425661425184614206565b6141ec565b9050828152602081018484840111156142725761427161418a565b5b61427d848285614236565b509392505050565b5f82601f83011261429957614298614186565b5b81356142a9848260208601614244565b91505092915050565b5f602082840312156142c7576142c6613f4e565b5b5f82013567ffffffffffffffff8111156142e4576142e3613f52565b5b6142f084828501614285565b91505092915050565b5f6101008201905061430d5f83018b613fb4565b818103602083015261431f818a613ffb565b905081810360408301526143338189613ffb565b905081810360608301526143478188613ffb565b9050818103608083015261435b8187613ffb565b905081810360a083015261436f8186613ffb565b905081810360c08301526143838185613ffb565b905081810360e08301526143978184613ffb565b90509998505050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6143d881613f56565b82525050565b5f82825260208201905092915050565b5f6143f882613fc3565b61440281856143de565b9350614412818560208601613fdd565b61441b81613feb565b840191505092915050565b61442f81614033565b82525050565b5f61018083015f83015161444b5f8601826143cf565b506020830151848203602086015261446382826143ee565b915050604083015161447860408601826143cf565b506060830151848203606086015261449082826143ee565b91505060808301516144a560808601826143cf565b5060a083015184820360a08601526144bd82826143ee565b91505060c083015184820360c08601526144d782826143ee565b91505060e08301516144ec60e08601826143cf565b506101008301516145016101008601826143cf565b50610120830151614516610120860182614426565b5061014083015184820361014086015261453082826143ee565b91505061016083015184820361016086015261454c82826143ee565b9150508091505092915050565b5f6145648383614435565b905092915050565b5f602082019050919050565b5f614582826143a6565b61458c81856143b0565b93508360208202850161459e856143c0565b805f5b858110156145d957848403895281516145ba8582614559565b94506145c58361456c565b925060208a019950506001810190506145a1565b50829750879550505050505092915050565b5f6020820190508181035f8301526146038184614578565b905092915050565b5f600c9050919050565b5f81905092915050565b5f819050919050565b5f61463383836143cf565b60208301905092915050565b5f602082019050919050565b6146548161460b565b61465e8184614615565b92506146698261461f565b805f5b838110156146995781516146808782614628565b965061468b8361463f565b92505060018101905061466c565b505050505050565b5f610180820190506146b55f83018461464b565b92915050565b5f80604083850312156146d1576146d0613f4e565b5b5f6146de85828601613f75565b925050602083013567ffffffffffffffff8111156146ff576146fe613f52565b5b61470b85828601614285565b9150509250929050565b5f6020820190506147285f83018461403e565b92915050565b5f805f805f8060c0878903121561474857614747613f4e565b5b5f61475589828a01613f75565b965050602061476689828a01613f75565b955050604061477789828a01613f75565b945050606087013567ffffffffffffffff81111561479857614797613f52565b5b6147a489828a01614285565b935050608087013567ffffffffffffffff8111156147c5576147c4613f52565b5b6147d189828a01614285565b92505060a087013567ffffffffffffffff8111156147f2576147f1613f52565b5b6147fe89828a01614285565b9150509295509295509295565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f602082019050919050565b5f61484a8261480b565b6148548185614815565b935061485f83614825565b805f5b8381101561488f5781516148768882614628565b975061488183614834565b925050600181019050614862565b5085935050505092915050565b5f6020820190508181035f8301526148b48184614840565b905092915050565b5f6080820190506148cf5f830187613fb4565b6148dc6020830186613fb4565b6148e96040830185613fb4565b6148f66060830184613fb4565b95945050505050565b5f805f805f805f60e0888a03121561491a57614919613f4e565b5b5f88013567ffffffffffffffff81111561493757614936613f52565b5b6149438a828b01614285565b975050602088013567ffffffffffffffff81111561496457614963613f52565b5b6149708a828b01614285565b965050604088013567ffffffffffffffff81111561499157614990613f52565b5b61499d8a828b01614285565b955050606088013567ffffffffffffffff8111156149be576149bd613f52565b5b6149ca8a828b01614285565b945050608088013567ffffffffffffffff8111156149eb576149ea613f52565b5b6149f78a828b01614285565b93505060a088013567ffffffffffffffff811115614a1857614a17613f52565b5b614a248a828b01614285565b92505060c088013567ffffffffffffffff811115614a4557614a44613f52565b5b614a518a828b01614285565b91505092959891949750929550565b5f805f805f805f805f6101208a8c031215614a7e57614a7d613f4e565b5b5f8a013567ffffffffffffffff811115614a9b57614a9a613f52565b5b614aa78c828d01614285565b9950506020614ab88c828d01613f75565b98505060408a013567ffffffffffffffff811115614ad957614ad8613f52565b5b614ae58c828d01614285565b9750506060614af68c828d01613f75565b96505060808a013567ffffffffffffffff811115614b1757614b16613f52565b5b614b238c828d01614285565b95505060a08a013567ffffffffffffffff811115614b4457614b43613f52565b5b614b508c828d01614285565b94505060c0614b618c828d01613f75565b93505060e0614b728c828d01613f75565b9250506101008a013567ffffffffffffffff811115614b9457614b93613f52565b5b614ba08c828d01614285565b9150509295985092959850929598565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61010083015f830151614bef5f8601826143cf565b5060208301518482036020860152614c0782826143ee565b91505060408301518482036040860152614c2182826143ee565b91505060608301518482036060860152614c3b82826143ee565b91505060808301518482036080860152614c5582826143ee565b91505060a083015184820360a0860152614c6f82826143ee565b91505060c083015184820360c0860152614c8982826143ee565b91505060e083015184820360e0860152614ca382826143ee565b9150508091505092915050565b5f614cbb8383614bd9565b905092915050565b5f602082019050919050565b5f614cd982614bb0565b614ce38185614bba565b935083602082028501614cf585614bca565b805f5b85811015614d305784840389528151614d118582614cb0565b9450614d1c83614cc3565b925060208a01995050600181019050614cf8565b50829750879550505050505092915050565b5f6020820190508181035f830152614d5a8184614ccf565b905092915050565b7f496e76616c696420646f6e6174696f6e204944000000000000000000000000005f82015250565b5f614d96601383613fcd565b9150614da182614d62565b602082019050919050565b5f6020820190508181035f830152614dc381614d8a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614e0182613f56565b9150614e0c83613f56565b9250828203905081811115614e2457614e23614dca565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680614e9b57607f821691505b602082108103614eae57614ead614e57565b5b50919050565b5f81905092915050565b5f614ec882613fc3565b614ed28185614eb4565b9350614ee2818560208601613fdd565b80840191505092915050565b5f614ef98284614ebe565b915081905092915050565b5f819050815f5260205f209050919050565b5f8154614f2281614e84565b614f2c8186614eb4565b9450600182165f8114614f465760018114614f5b57614f8d565b60ff1983168652811515820286019350614f8d565b614f6485614f04565b5f5b83811015614f8557815481890152600182019150602081019050614f66565b838801955050505b50505092915050565b5f614fa18284614f16565b915081905092915050565b7f55736572206e6f7420666f756e640000000000000000000000000000000000005f82015250565b5f614fe0600e83613fcd565b9150614feb82614fac565b602082019050919050565b5f6020820190508181035f83015261500d81614fd4565b9050919050565b5f61501e82613f56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036150505761504f614dca565b5b600182019050919050565b7f7375636365737366756c000000000000000000000000000000000000000000005f82015250565b5f61508f600a83614eb4565b915061509a8261505b565b600a82019050919050565b5f6150af82615083565b9150819050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026151037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826150c8565b61510d86836150c8565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61514861514361513e84613f56565b615125565b613f56565b9050919050565b5f819050919050565b6151618361512e565b61517561516d8261514f565b8484546150d4565b825550505050565b5f90565b61518961517d565b615194818484615158565b505050565b5b818110156151b7576151ac5f82615181565b60018101905061519a565b5050565b601f8211156151fc576151cd81614f04565b6151d6846150b9565b810160208510156151e5578190505b6151f96151f1856150b9565b830182615199565b50505b505050565b5f82821c905092915050565b5f61521c5f1984600802615201565b1980831691505092915050565b5f615234838361520d565b9150826002028217905092915050565b61524d82613fc3565b67ffffffffffffffff8111156152665761526561418e565b5b6152708254614e84565b61527b8282856151bb565b5f60209050601f8311600181146152ac575f841561529a578287015190505b6152a48582615229565b86555061530b565b601f1984166152ba86614f04565b5f5b828110156152e1578489015182556001820191506020850194506020810190506152bc565b868310156152fe57848901516152fa601f89168261520d565b8355505b6001600288020188555050505b505050505050565b7f496e76616c6964207573657220494400000000000000000000000000000000005f82015250565b5f615347600f83613fcd565b915061535282615313565b602082019050919050565b5f6020820190508181035f8301526153748161533b565b9050919050565b7f446f6e6174696f6e206e6f7420666f756e6400000000000000000000000000005f82015250565b5f6153af601283613fcd565b91506153ba8261537b565b602082019050919050565b5f6020820190508181035f8301526153dc816153a3565b9050919050565b7f416c726561647920636f6e6669726d65640000000000000000000000000000005f82015250565b5f615417601183613fcd565b9150615422826153e3565b602082019050919050565b5f6020820190508181035f8301526154448161540b565b9050919050565b5f6154568286614ebe565b91506154628285614ebe565b915061546e8284614ebe565b9150819050949350505050565b5f6154868286614f16565b91506154928285614f16565b915061549e8284614f16565b9150819050949350505050565b7f566572696669636174696f6e206661696c6564000000000000000000000000005f82015250565b5f6154df601383613fcd565b91506154ea826154ab565b602082019050919050565b5f6020820190508181035f83015261550c816154d3565b9050919050565b5f61551d82613f56565b915061552883613f56565b925082820261553681613f56565b9150828204841483151761554d5761554c614dca565b5b5092915050565b7f4578636565647320766f6c756d65206c696d69740000000000000000000000005f82015250565b5f615588601483613fcd565b915061559382615554565b602082019050919050565b5f6020820190508181035f8301526155b58161557c565b9050919050565b5f6155c682613f56565b91506155d183613f56565b92508282019050808211156155e9576155e8614dca565b5b92915050565b7f456d61696c20616c7265616479206578697374730000000000000000000000005f82015250565b5f615623601483613fcd565b915061562e826155ef565b602082019050919050565b5f6020820190508181035f83015261565081615617565b9050919050565b7f557365726e616d6520616c7265616479206578697374730000000000000000005f82015250565b5f61568b601783613fcd565b915061569682615657565b602082019050919050565b5f6020820190508181035f8301526156b88161567f565b9050919050565b7f4343434420616c726561647920657869737473000000000000000000000000005f82015250565b5f6156f3601383613fcd565b91506156fe826156bf565b602082019050919050565b5f6020820190508181035f830152615720816156e7565b9050919050565b7f446f6e6174696f6e206973206e6f74207375636365737366756c2e00000000005f82015250565b5f61575b601b83613fcd565b915061576682615727565b602082019050919050565b5f6020820190508181035f8301526157888161574f565b9050919050565b5f819050919050565b6157a96157a482613f56565b61578f565b82525050565b5f6157ba8285614ebe565b91506157c68284615798565b6020820191508190509392505050565b7f4163636f756e74206578697374732e00000000000000000000000000000000005f82015250565b5f61580a600f83613fcd565b9150615815826157d6565b602082019050919050565b5f6020820190508181035f830152615837816157fe565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61587582613f56565b915061588083613f56565b9250826158905761588f61583e565b5b828204905092915050565b5f6158a582613f56565b91506158b083613f56565b9250826158c0576158bf61583e565b5b82820690509291505056fea26469706673582212203ba153f5111a53aebf91fefc034d65cc38d7e6b24450111f137781bf758b83f064736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDDONATION = "addDonation";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_BLOODDONATIONS = "bloodDonations";

    public static final String FUNC_COUNTUNIQUESUCCESSFULVOLUNTEERS = "countUniqueSuccessfulVolunteers";

    public static final String FUNC_DELETEBLOODDONATION = "deleteBloodDonation";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_GETALLBLOODDONATIONS = "getAllBloodDonations";

    public static final String FUNC_GETALLUSERS = "getAllUsers";

    public static final String FUNC_GETBLOODDONATION = "getBloodDonation";

    public static final String FUNC_GETBLOODGROUPSTATISTICS = "getBloodGroupStatistics";

    public static final String FUNC_GETDONATIONSBYNAME = "getDonationsByName";

    public static final String FUNC_GETMONTHLYDONATIONSTATISTICS = "getMonthlyDonationStatistics";

    public static final String FUNC_GETSUCCESSFULDONATIONCOUNTS = "getSuccessfulDonationCounts";

    public static final String FUNC_GETTOTALSUCCESSFULDONATIONVOLUME = "getTotalSuccessfulDonationVolume";

    public static final String FUNC_GETUSERBYEMAIL = "getUserByEmail";

    public static final String FUNC_GETUSERCOUNTER = "getUserCounter";

    public static final String FUNC_ISSUECERTIFICATION = "issueCertification";

    public static final String FUNC_UPDATEDONATIONVOLUMEBYID = "updateDonationVolumeById";

    public static final String FUNC_UPDATEMEDICALSTATUS = "updateMedicalStatus";

    public static final String FUNC_USERDONATIONS = "userDonations";

    public static final String FUNC_USERS = "users";

    @Deprecated
    protected Contract(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Contract(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Contract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Contract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addDonation(String _name,
            BigInteger _donationDate, String _registeredDate, BigInteger _volume, String _bloodType,
            String _status, BigInteger _userId, BigInteger _id_blood, String _location) {
        final Function function = new Function(
                FUNC_ADDDONATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_donationDate), 
                new org.web3j.abi.datatypes.Utf8String(_registeredDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_volume), 
                new org.web3j.abi.datatypes.Utf8String(_bloodType), 
                new org.web3j.abi.datatypes.Utf8String(_status), 
                new org.web3j.abi.datatypes.generated.Uint256(_userId), 
                new org.web3j.abi.datatypes.generated.Uint256(_id_blood), 
                new org.web3j.abi.datatypes.Utf8String(_location)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String _username, String _email,
            String _cccd, String _gender, String _dayOfBirth, String _bloodGroup,
            String _homeAddress) {
        final Function function = new Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_username), 
                new org.web3j.abi.datatypes.Utf8String(_email), 
                new org.web3j.abi.datatypes.Utf8String(_cccd), 
                new org.web3j.abi.datatypes.Utf8String(_gender), 
                new org.web3j.abi.datatypes.Utf8String(_dayOfBirth), 
                new org.web3j.abi.datatypes.Utf8String(_bloodGroup), 
                new org.web3j.abi.datatypes.Utf8String(_homeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>> bloodDonations(
            BigInteger param0) {
        final Function function = new Function(FUNC_BLOODDONATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>>(function,
                new Callable<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (Boolean) results.get(9).getValue(), 
                                (String) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> countUniqueSuccessfulVolunteers() {
        final Function function = new Function(FUNC_COUNTUNIQUESUCCESSFULVOLUNTEERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteBloodDonation(BigInteger _donationId) {
        final Function function = new Function(
                FUNC_DELETEBLOODDONATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_donationId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(BigInteger _userId) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_userId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllBloodDonations() {
        final Function function = new Function(FUNC_GETALLBLOODDONATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<BloodDonation>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllUsers() {
        final Function function = new Function(FUNC_GETALLUSERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>> getBloodDonation(
            BigInteger _donationId) {
        final Function function = new Function(FUNC_GETBLOODDONATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_donationId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>>(function,
                new Callable<Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, BigInteger, String, BigInteger, String, String, BigInteger, BigInteger, Boolean, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (Boolean) results.get(9).getValue(), 
                                (String) results.get(10).getValue(), 
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getBloodGroupStatistics(
            ) {
        final Function function = new Function(FUNC_GETBLOODGROUPSTATISTICS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getDonationsByName(String _name) {
        final Function function = new Function(FUNC_GETDONATIONSBYNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<BloodDonation>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getMonthlyDonationStatistics() {
        final Function function = new Function(FUNC_GETMONTHLYDONATIONSTATISTICS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray12<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getSuccessfulDonationCounts() {
        final Function function = new Function(FUNC_GETSUCCESSFULDONATIONCOUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTotalSuccessfulDonationVolume() {
        final Function function = new Function(FUNC_GETTOTALSUCCESSFULDONATIONVOLUME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, String>> getUserByEmail(
            String _email) {
        final Function function = new Function(FUNC_GETUSERBYEMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, String>>(function,
                new Callable<Tuple8<BigInteger, String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, String, String, String, String, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, String, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserCounter() {
        final Function function = new Function(FUNC_GETUSERCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> issueCertification(BigInteger donationId) {
        final Function function = new Function(
                FUNC_ISSUECERTIFICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(donationId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDonationVolumeById(BigInteger id_user,
            BigInteger donationId, BigInteger newVolume, String bloodGroup, String cccd,
            String gender) {
        final Function function = new Function(
                FUNC_UPDATEDONATIONVOLUMEBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id_user), 
                new org.web3j.abi.datatypes.generated.Uint256(donationId), 
                new org.web3j.abi.datatypes.generated.Uint256(newVolume), 
                new org.web3j.abi.datatypes.Utf8String(bloodGroup), 
                new org.web3j.abi.datatypes.Utf8String(cccd), 
                new org.web3j.abi.datatypes.Utf8String(gender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateMedicalStatus(BigInteger donationId,
            String newMedicalStatus) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(donationId), 
                new org.web3j.abi.datatypes.Utf8String(newMedicalStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> userDonations(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_USERDONATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, String>> users(
            BigInteger param0) {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, String>>(function,
                new Callable<Tuple8<BigInteger, String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, String, String, String, String, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, String, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static Contract load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Contract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Contract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Contract load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Contract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Contract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Contract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Contract> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Contract> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<Contract> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Contract> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<org.web3j.tx.Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class BloodDonation extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger donationDate;

        public String registeredDate;

        public BigInteger volume;

        public String bloodType;

        public String status;

        public BigInteger id_blood;

        public BigInteger userId;

        public Boolean certificationIssued;

        public String location;

        public String medicalstatus;

        public BloodDonation(BigInteger id, String name, BigInteger donationDate,
                String registeredDate, BigInteger volume, String bloodType, String status,
                BigInteger id_blood, BigInteger userId, Boolean certificationIssued,
                String location, String medicalstatus) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(donationDate), 
                    new org.web3j.abi.datatypes.Utf8String(registeredDate), 
                    new org.web3j.abi.datatypes.generated.Uint256(volume), 
                    new org.web3j.abi.datatypes.Utf8String(bloodType), 
                    new org.web3j.abi.datatypes.Utf8String(status), 
                    new org.web3j.abi.datatypes.generated.Uint256(id_blood), 
                    new org.web3j.abi.datatypes.generated.Uint256(userId), 
                    new org.web3j.abi.datatypes.Bool(certificationIssued), 
                    new org.web3j.abi.datatypes.Utf8String(location), 
                    new org.web3j.abi.datatypes.Utf8String(medicalstatus));
            this.id = id;
            this.name = name;
            this.donationDate = donationDate;
            this.registeredDate = registeredDate;
            this.volume = volume;
            this.bloodType = bloodType;
            this.status = status;
            this.id_blood = id_blood;
            this.userId = userId;
            this.certificationIssued = certificationIssued;
            this.location = location;
            this.medicalstatus = medicalstatus;
        }

        public BloodDonation(Uint256 id, Utf8String name, Uint256 donationDate,
                Utf8String registeredDate, Uint256 volume, Utf8String bloodType, Utf8String status,
                Uint256 id_blood, Uint256 userId, Bool certificationIssued, Utf8String location,
                Utf8String medicalstatus) {
            super(id, name, donationDate, registeredDate, volume, bloodType, status, id_blood, userId, certificationIssued, location, medicalstatus);
            this.id = id.getValue();
            this.name = name.getValue();
            this.donationDate = donationDate.getValue();
            this.registeredDate = registeredDate.getValue();
            this.volume = volume.getValue();
            this.bloodType = bloodType.getValue();
            this.status = status.getValue();
            this.id_blood = id_blood.getValue();
            this.userId = userId.getValue();
            this.certificationIssued = certificationIssued.getValue();
            this.location = location.getValue();
            this.medicalstatus = medicalstatus.getValue();
        }
        public BigInteger getId() {
			return id;
		}
 
		public String getLocation() {
			return location;
		}

		public String getName() {
			return name;
		}

		public BigInteger getDonationDate() {
			return donationDate;
		}

		public String getRegisteredDate() {
			return registeredDate;
		}

		public BigInteger getVolume() {
			return volume;
		}

		public String getBloodType() {
			return bloodType;
		}

		public String getStatus() {
			return status;
		}

		public BigInteger getIdBlood() {
			return id_blood;
		}

		public BigInteger getUserId() {
			return userId;
		}

		public Boolean getCertificationIssued() {
			return certificationIssued;
		}

		public String getMedicalstatus() {
			return medicalstatus;
		}
		
	}


	public static class User extends DynamicStruct {
		public BigInteger id;

		public String username;

		public String email;

		public String cccd;

		public String gender;

		public String dayOfBirth;

		public String bloodGroup;

		public String homeAddress;

		public User(BigInteger id, String username, String email, String cccd, String gender, String dayOfBirth,
				String bloodGroup, String homeAddress) {
			super(new org.web3j.abi.datatypes.generated.Uint256(id), new org.web3j.abi.datatypes.Utf8String(username),
					new org.web3j.abi.datatypes.Utf8String(email), new org.web3j.abi.datatypes.Utf8String(cccd),
					new org.web3j.abi.datatypes.Utf8String(gender), new org.web3j.abi.datatypes.Utf8String(dayOfBirth),
					new org.web3j.abi.datatypes.Utf8String(bloodGroup),
					new org.web3j.abi.datatypes.Utf8String(homeAddress));
			this.id = id;
			this.username = username;
			this.email = email;
			this.cccd = cccd;
			this.gender = gender;
			this.dayOfBirth = dayOfBirth;
			this.bloodGroup = bloodGroup;
			this.homeAddress = homeAddress;
		}

		public User(Uint256 id, Utf8String username, Utf8String email, Utf8String cccd, Utf8String gender,
				Utf8String dayOfBirth, Utf8String bloodGroup, Utf8String homeAddress) {
			super(id, username, email, cccd, gender, dayOfBirth, bloodGroup, homeAddress);
			this.id = id.getValue();
			this.username = username.getValue();
			this.email = email.getValue();
			this.cccd = cccd.getValue();
			this.gender = gender.getValue();
			this.dayOfBirth = dayOfBirth.getValue();
			this.bloodGroup = bloodGroup.getValue();
			this.homeAddress = homeAddress.getValue();
		}

		public BigInteger getId() {
			return id;
		}

		public String getUsername() {
			return username;
		}

		public String getEmail() {
			return email;
		}

		public String getCccd() {
			return cccd;
		}

		public String getGender() {
			return gender;
		}

		public String getDayOfBirth() {
			return dayOfBirth;
		}

		public String getBloodGroup() {
			return bloodGroup;
		}

		public String getHomeAddress() {
			return homeAddress;
		}
	}
}
